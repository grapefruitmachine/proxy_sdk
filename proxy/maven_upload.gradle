apply plugin: 'maven'

// 读取 maven_user.properties 配置文件
Properties user_properties = new Properties()
user_properties.load(project.rootProject.file('maven_user.properties').newDataInputStream())

def releaseRepoUrl = user_properties.getProperty("repository.url.release")

def userName = user_properties.getProperty("repository.user")
def userPassword = user_properties.getProperty("repository.password")


// 读取 maven_pom.properties 配置文件
Properties pom_properties = new Properties()
pom_properties.load(project.file('maven_pom.properties').newDataInputStream())

def pom_name = pom_properties.getProperty("POM_NAME")
def pom_description = pom_properties.getProperty("POM_DESCRIPTION")
def pom_group = pom_properties.getProperty("POM_GROUP")
def pom_artifact_id = pom_properties.getProperty("POM_ARTIFACT_ID")
def pom_packaging = pom_properties.getProperty("POM_PACKAGING")
def pom_version = pom_properties.getProperty("POM_VERSION")

uploadArchives {
    repositories.mavenDeployer {
        repository(url: releaseRepoUrl) {
            authentication(userName: userName, password: userPassword)
        }

        pom.project {
            name pom_name
            description pom_description
            url releaseRepoUrl
            groupId pom_group
            artifactId pom_artifact_id
            packaging pom_packaging
            version pom_version
        }
    }
}

task cleanDir(type:Delete) {
    delete buildDir
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

uploadArchives.mustRunAfter 'cleanDir'